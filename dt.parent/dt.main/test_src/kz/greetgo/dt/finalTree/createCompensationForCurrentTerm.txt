group(
    condition(
        case(client.account[in.accountIndex].lastCompensationTerm!=client.account[in.accountIndex].termToPay,
            assign(loanUsage, "C"),
            assign(orderStatus, "N"),

            assign(termTotalAmount, client.account[in.accountIndex].payPlan[client.account[in.accountIndex].termToPay].remainingTotal),
            assign(termPrincipalAmount, client.account[in.accountIndex].payPlan[client.account[in.accountIndex].termToPay-1].remainingPrincipal),



            group( //Penalties
                assign(length, len(client.account[in.accountIndex].product.Penalty)),
                assign(totalPenaltySum, 0),

                foreach (i, 0, length - 1, //TODO Run throw all fines (if one day batch is down fine will not be added)
                    group(
                        condition(
                            case(
                                dpd>0
                                &
                                client.account[in.accountIndex].product.Penalty[i].CalculationPlace = "Compensation", //if not already created
                                    group(
                                        condition(
                                            case(client.account[in.accountIndex].product.Penalty[i].CalculationRule = "BalanceOfPrincipal",
                                                assign(amt, client.account[in.accountIndex].loanAmt - client.account[in.accountIndex].totalPaidPrincipalAmt)
                                            ),
                                            case(client.account[in.accountIndex].product.Penalty[i].CalculationRule = "LoanPrincipal",
                                                assign(amt, client.account[in.accountIndex].loanAmt)
                                            ),
                                            case(client.account[in.accountIndex].product.Penalty[i].CalculationRule = "OverdueLoanPrincipal",
                                                //Total overdue principal
                                                assign(amt, 0),
                                                foreach (j, client.account[in.accountIndex].paidTerms, client.account[in.accountIndex].termToPay,
                                                    assign(amt, amt+client.account[in.accountIndex].payPlan[j-1].remainingPrincipal)
                                                )
                                            ),
                                            case(client.account[in.accountIndex].product.Penalty[i].CalculationRule = "TotalOverdueAmount",
                                                //Total overdue amount
                                                assign(amt, 0),
                                                foreach (j, client.account[in.accountIndex].paidTerms, client.account[in.accountIndex].termToPay,
                                                    assign(amt, amt+client.account[in.accountIndex].payPlan[j-1].remainingAgentFee),
                                                    assign(amt, amt+client.account[in.accountIndex].payPlan[j-1].remainingInterest),
                                                    assign(amt, amt+client.account[in.accountIndex].payPlan[j-1].remainingPrincipal),
                                                    assign(amt, amt+client.account[in.accountIndex].payPlan[j-1].remainingServiceFee),
                                                    assign(amt, amt+client.account[in.accountIndex].payPlan[j-1].remainingPrepayPkgFee),
                                                    assign(amt, amt+client.account[in.accountIndex].payPlan[j-1].remainingStampDutyFee),
                                                    assign(amt, amt+client.account[in.accountIndex].payPlan[j-1].remainingLifeInsurance),
                                                    assign(amt, amt+client.account[in.accountIndex].payPlan[j-1].remainingReplaceSvcFee),
                                                    assign(amt, amt+client.account[in.accountIndex].payPlan[j-1].remainingInstallmentFee)
                                                ),

                                                foreach(j, 0, len(client.account[in.accountIndex].overdueFine)-1,
                                                    condition(
                                                        case(
                                                            client.account[in.accountIndex].overdueFine[j].status = "U",
                                                                group( //Prepay Pkg Fee
                                                                    assign(a, client.account[in.accountIndex].overdueFine[j].remainingAmount),
                                                                    assign(amt, amt+a)
                                                                )
                                                        )
                                                    )
                                                )
                                            )
                                        ),

                                        assign(fineAmount, client.account[in.accountIndex].product.Penalty[i].Rate * amt),

                                        condition(
                                            case(client.account[in.accountIndex].product.Penalty[i].Accumulative = true(),
                                                assign(fineAmount, fineAmount * overdueDays)
                                            )
                                        ),


                                        procedure(generateFine),

                                        assign(totalPenaltySum, totalPenaltySum + fineAmount)
                                    )
                            )
                        )
                    )
                )
            ),

            assign(generateTransaction_transactionAmount, termTotalAmount+totalPenaltySum), // calculate here

            assign(settleFeeType, "CompensateAmt"),
            assign(term, client.account[in.accountIndex].termToPay),
            assign(txnDirection, "-"),

            assign(client.account[in.accountIndex].lastCompensationTerm, client.account[in.accountIndex].termToPay),

            procedure(generateTransaction)
        )
    )
)